var searchIndex = {};
searchIndex["monster"] = {"doc":"","items":[[0,"incubation","monster","This module includes new utilities which are being matured and tested for permanent inclusion. Items in this module should be considered unstable and thus may change or get removed completely at any time.",null,null],[0,"swap_tuple","monster::incubation","",null,null],[8,"SwapTupleExt","monster::incubation::swap_tuple","",null,null],[16,"Result","","",0,null],[10,"swap","","Swap the two tuple elements",0,null],[0,"map_ref_mut","monster::incubation","",null,null],[5,"map_ref_mut","monster::incubation::map_ref_mut","Map the value of a mutable reference. Useful if you want to apply a `FnOnce(T) -> T` to a `&mut T`. This function is unsafe because panicking in `f` would leave the pointee uninitialized.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":null}],[8,"MapRefMutExt","","",null,null],[11,"map_ref_mut","","Map the value of a mutable reference. Useful if you want to apply a `FnOnce(T) -> T` to a `&mut T`. This function is unsafe because panicking in `f` would leave the pointee uninitialized.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[0,"zip_ends","monster::incubation","",null,null],[3,"ZipEnds","monster::incubation::zip_ends","An iterator adaptor to iterate over pairs of starting and ending elements.",null,null],[8,"ZipEndsIterExt","","",null,null],[16,"Iter","","",2,null],[10,"zip_ends","","Create a new `ZipEnds` adaptor. See the structs' documentation for more.",2,{"inputs":[{"name":"self"}],"output":{"name":"zipends"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"fmt","monster::incubation","",null,null],[5,"format","monster::incubation::fmt","Format a string. The format syntax is similar to the one used by `std::fmt`, but very limited at the moment.",null,null],[5,"write_format","","Same as `format` but writes to a generic buffer instead.",null,null],[0,"error","","",null,null],[4,"Error","monster::incubation::fmt::error","",null,null],[13,"NotEnoughArgs","","",4,null],[13,"UnexpectedChar","","",4,null],[13,"UnexpectedRightBrace","","",4,null],[13,"Unkown","","",4,null],[6,"Result","","",null,null],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"flip","monster::incubation","",null,null],[3,"Flip","monster::incubation::flip","",null,null],[3,"Flip3","","",null,null],[3,"Flip4","","",null,null],[3,"Flip5","","",null,null],[3,"Flip6","","",null,null],[3,"Flip7","","",null,null],[3,"Flip8","","",null,null],[3,"Flip9","","",null,null],[3,"Flip10","","",null,null],[0,"traits","","",null,null],[8,"FlipFnExt","monster::incubation::flip::traits","",null,null],[11,"flip","","",5,{"inputs":[{"name":"self"}],"output":{"name":"flip"}}],[8,"Flip3FnExt","","",null,null],[11,"flip3","","",6,{"inputs":[{"name":"self"}],"output":{"name":"flip3"}}],[8,"Flip4FnExt","","",null,null],[11,"flip4","","",7,{"inputs":[{"name":"self"}],"output":{"name":"flip4"}}],[8,"Flip5FnExt","","",null,null],[11,"flip5","","",8,{"inputs":[{"name":"self"}],"output":{"name":"flip5"}}],[8,"Flip6FnExt","","",null,null],[11,"flip6","","",9,{"inputs":[{"name":"self"}],"output":{"name":"flip6"}}],[8,"Flip7FnExt","","",null,null],[11,"flip7","","",10,{"inputs":[{"name":"self"}],"output":{"name":"flip7"}}],[8,"Flip8FnExt","","",null,null],[11,"flip8","","",11,{"inputs":[{"name":"self"}],"output":{"name":"flip8"}}],[8,"Flip9FnExt","","",null,null],[11,"flip9","","",12,{"inputs":[{"name":"self"}],"output":{"name":"flip9"}}],[8,"Flip10FnExt","","",null,null],[11,"flip10","","",13,{"inputs":[{"name":"self"}],"output":{"name":"flip10"}}],[0,"methods","monster::incubation::flip","",null,null],[5,"flip","monster::incubation::flip::methods","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip"}}],[5,"flip3","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip3"}}],[5,"flip4","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip4"}}],[5,"flip5","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip5"}}],[5,"flip6","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip6"}}],[5,"flip7","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip7"}}],[5,"flip8","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip8"}}],[5,"flip9","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip9"}}],[5,"flip10","","",null,{"inputs":[{"name":"f"}],"output":{"name":"flip10"}}],[11,"call_once","monster::incubation::flip","",14,null],[11,"call_once","","",15,null],[11,"call_once","","",16,null],[11,"call_once","","",17,null],[11,"call_once","","",18,null],[11,"call_once","","",19,null],[11,"call_once","","",20,null],[11,"call_once","","",21,null],[11,"call_once","","",22,null],[0,"some_if","monster::incubation","",null,null],[5,"some_if","monster::incubation::some_if","Returns `None` if `pred` is `false`, otherwise it returns `Some(result_of_calling_f)`.",null,{"inputs":[{"name":"bool"},{"name":"f"}],"output":{"name":"option"}}],[0,"tuple_indexing","monster::incubation","",null,null],[8,"TupleIndexingExt","monster::incubation::tuple_indexing","",null,null],[10,"get","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[0,"tuple_iter","monster::incubation","",null,null],[3,"Iter","monster::incubation::tuple_iter","",null,null],[8,"TupleIterExt","","",null,null],[10,"iter","","",24,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ref_eq","monster::incubation","",null,null],[8,"RefEq","monster::incubation::ref_eq","",null,null],[11,"ref_eq","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[0,"global_init_cleanup","monster::incubation","",null,null],[3,"InitHandle","monster::incubation::global_init_cleanup","",null,null],[6,"GlobalInitHandle","","",null,null],[6,"LocalInitHandle","","",null,null],[8,"InitCleanup","","",null,null],[10,"init","","",27,{"inputs":[],"output":null}],[10,"cleanup","","",27,{"inputs":[],"output":null}],[11,"new_global","","",28,{"inputs":[],"output":{"name":"globalinithandle"}}],[11,"from_global","","",28,{"inputs":[{"name":"mutex"}],"output":{"name":"localinithandle"}}],[11,"drop","","",28,{"inputs":[{"name":"self"}],"output":null}],[0,"with_lock","monster::incubation","",null,null],[8,"WithLock","monster::incubation::with_lock","",null,null],[10,"with_lock","","Conveniently access mutexes.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[0,"find_and_take","monster::incubation","",null,null],[8,"FindAndTake","monster::incubation::find_and_take","",null,null],[16,"Item","","",30,null],[10,"find_and_take","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[0,"slice_drop_first","monster::incubation","",null,null],[8,"SliceDropFirst","monster::incubation::slice_drop_first","",null,null],[10,"drop_first","","Drop the first `n` elements from the slice. If `n` is bigger than the slice's length an empty slice will be returned.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[0,"slice_drop_last","monster::incubation","",null,null],[8,"SliceDropLast","monster::incubation::slice_drop_last","",null,null],[10,"drop_last","","Drop the last `n` elements from the slice. If `n` is bigger than the slice's length an empty slice will be returned.",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[0,"slice_take_while","monster::incubation","",null,null],[5,"slice_take_while","monster::incubation::slice_take_while","",null,null],[8,"SliceTakeWhile","","",null,null],[16,"Item","","",33,null],[10,"take_while","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"split_int","monster::incubation","",null,null],[5,"split_mut_u16","monster::incubation::split_int","",null,null],[8,"SplitInt","","",null,null],[16,"Output","","",34,null],[16,"MutOutput","","",34,null],[10,"split","","",34,null],[10,"split_mut","","",34,null],[0,"reverse_bitorder","monster::incubation","",null,null],[5,"reverse_bitorder","monster::incubation::reverse_bitorder","",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"ReverseBitorder","","",null,null],[10,"reverse_bitorder","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"owning_ref_mut","monster::incubation","",null,null],[3,"OwningRefMut","monster::incubation::owning_ref_mut","`OwningRefMut` allows you to return mutably borrowed values. Careful usage is advised, the lifetime semantics might not be entirely sound.",null,null],[11,"new","","",36,{"inputs":[{"name":"box"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"drop","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",36,null],[11,"deref_mut","","",36,null],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"mutate","monster","Temporarily rebind variables as mutable",null,null],[14,"anon","","Create an anonymous struct.",null,null],[14,"init_tests","","Implicitly initialize a set of tests",null,null],[14,"array_type","","Create an array wrapper which implements",null,null]],"paths":[[8,"SwapTupleExt"],[8,"MapRefMutExt"],[8,"ZipEndsIterExt"],[3,"ZipEnds"],[4,"Error"],[8,"FlipFnExt"],[8,"Flip3FnExt"],[8,"Flip4FnExt"],[8,"Flip5FnExt"],[8,"Flip6FnExt"],[8,"Flip7FnExt"],[8,"Flip8FnExt"],[8,"Flip9FnExt"],[8,"Flip10FnExt"],[3,"Flip"],[3,"Flip3"],[3,"Flip4"],[3,"Flip5"],[3,"Flip6"],[3,"Flip7"],[3,"Flip8"],[3,"Flip9"],[3,"Flip10"],[8,"TupleIndexingExt"],[8,"TupleIterExt"],[3,"Iter"],[8,"RefEq"],[8,"InitCleanup"],[3,"InitHandle"],[8,"WithLock"],[8,"FindAndTake"],[8,"SliceDropFirst"],[8,"SliceDropLast"],[8,"SliceTakeWhile"],[8,"SplitInt"],[8,"ReverseBitorder"],[3,"OwningRefMut"]]};
initSearch(searchIndex);
